import os
import sys
import time
import psutil
import pandas as pd
import subprocess
import requests
from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, WebDriverException

# ===== CONFIGURA√á√ïES =====
ARQUIVO_PLANILHA = r"C:\Users\USER\PycharmProjects\Remove Promo\DATA\PRE√áO CORRIGIR FRETE GRATIS SEM 12.xlsx"
COLUNA_MLB = "CODIGO_ANUNCIO"
TEMPO_ESPERA = 5
TEMPO_ESPERA_EXTRA = 3  # tempo adicional entre a√ß√µes
TENTATIVAS_MAX = 3
ARQUIVO_FALHAS = "mlbs_falhados.txt"

EDGE_PROFILE_PATH = r"C:\Users\USER\AppData\Local\Microsoft\Edge\User Data"
EDGE_PROFILE_NAME = "Profile 1"
EDGE_DRIVER_PATH = r"C:\WebDriver\msedgedriver.exe"
EDGE_BINARY_PATH = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
DEBUG_PORT = 9222


# ===== FUN√á√ïES =====
def verificar_porta_debug():
    """Verifica se a porta de depura√ß√£o est√° respondendo"""
    try:
        response = requests.get(f"http://localhost:{DEBUG_PORT}/json/version", timeout=5)
        return response.status_code == 200
    except:
        return False


def matar_processos_edge():
    """Encerra todos os processos do Edge de forma robusta"""
    print("üî¥ Encerrando processos do Edge...")
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if proc.info['name'] and any(x in proc.info['name'].lower() for x in ['msedge', 'edge']):
                proc.kill()
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    time.sleep(5)


def iniciar_edge_com_debug():
    """Inicia o Edge manualmente com porta de depura√ß√£o"""
    print("üöÄ Iniciando Edge com depura√ß√£o remota...")
    cmd = [
        EDGE_BINARY_PATH,
        f"--user-data-dir={EDGE_PROFILE_PATH}",
        f"--profile-directory={EDGE_PROFILE_NAME}",
        f"--remote-debugging-port={DEBUG_PORT}",
        "--no-first-run",
        "about:blank"
    ]

    try:
        subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        for _ in range(30):
            if verificar_porta_debug():
                return True
            time.sleep(1)

        print("‚ùå Timeout: Porta de depura√ß√£o n√£o respondeu")
        return False
    except Exception as e:
        print(f"‚ùå Falha ao iniciar Edge: {e}")
        return False


def conectar_selenium():
    """Conecta Selenium ao Edge usando a nova sintaxe"""
    options = Options()
    options.add_experimental_option("debuggerAddress", f"127.0.0.1:{DEBUG_PORT}")

    try:
        service = Service(executable_path=EDGE_DRIVER_PATH)
        driver = webdriver.Edge(service=service, options=options)
        driver.get("about:blank")  # Teste de conex√£o
        return driver
    except Exception as e:
        print(f"‚ùå Falha ao conectar Selenium: {e}")
        return None


def verificar_ambiente():
    """Verifica se todos os requisitos est√£o atendidos"""
    erros = []

    if not os.path.exists(EDGE_DRIVER_PATH):
        erros.append(f"EdgeDriver n√£o encontrado em: {EDGE_DRIVER_PATH}")

    if not os.path.exists(EDGE_BINARY_PATH):
        erros.append(f"Execut√°vel do Edge n√£o encontrado em: {EDGE_BINARY_PATH}")

    if not os.path.exists(ARQUIVO_PLANILHA):
        erros.append(f"Planilha n√£o encontrada: {ARQUIVO_PLANILHA}")

    if erros:
        print("\n‚ùå Erros de configura√ß√£o:")
        for erro in erros:
            print(f"- {erro}")
        print("\nüîç Solu√ß√µes:")
        print("- Baixe o EdgeDriver em: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/")
        print("- Verifique os caminhos configurados")
        sys.exit(1)


def remover_promocoes(driver, mlb):
    """
    Remove todas as promo√ß√µes de um an√∫ncio (diretas ou via popup).
    Retorna a quantidade de promo√ß√µes removidas.
    """
    url = f"https://www.mercadolivre.com.br/anuncios/lista/promos/?search={mlb}"
    driver.get(url)
    time.sleep(TEMPO_ESPERA)

    promocoes_removidas = 0

    while True:
        promocoes_restantes = False
        try:
            acoes = driver.find_elements(By.XPATH, "//button[contains(., 'Deixar de participar') or contains(., 'Alterar')]")
            if not acoes:
                break

            for acao in acoes:
                promocoes_restantes = True
                texto = acao.text.strip()

                # Caso o bot√£o direto "Deixar de participar" esteja vis√≠vel
                if "Deixar de participar" in texto:
                    acao.click()
                    time.sleep(TEMPO_ESPERA)

                    # Confirmar no segundo popup (bot√£o azul)
                    try:
                        confirmar_final = driver.find_element(By.XPATH, "//button[contains(., 'Deixar de participar')]")
                        confirmar_final.click()
                        promocoes_removidas += 1
                        print(f"‚úîÔ∏è Promo√ß√£o removida diretamente - {mlb}")
                    except NoSuchElementException:
                        print(f"‚ö†Ô∏è Confirma√ß√£o final n√£o encontrada - {mlb}")

                    time.sleep(TEMPO_ESPERA_EXTRA)

                # Caso precise clicar em "Alterar"
                elif "Alterar" in texto:
                    acao.click()
                    time.sleep(TEMPO_ESPERA)

                    try:
                        deixar = driver.find_element(By.XPATH, "//button[contains(., 'Deixar de participar')]")
                        deixar.click()
                        time.sleep(TEMPO_ESPERA)

                        # Confirmar no segundo popup (bot√£o azul)
                        try:
                            confirmar_final = driver.find_element(By.XPATH, "//button[contains(., 'Deixar de participar')]")
                            confirmar_final.click()
                            promocoes_removidas += 1
                            print(f"‚úîÔ∏è Promo√ß√£o removida via popup - {mlb}")
                        except NoSuchElementException:
                            print(f"‚ö†Ô∏è Confirma√ß√£o final n√£o encontrada - {mlb}")

                    except NoSuchElementException:
                        print(f"‚ö†Ô∏è Bot√£o 'Deixar de participar' n√£o encontrado no popup - {mlb}")

                    time.sleep(TEMPO_ESPERA_EXTRA)

            # Atualiza a p√°gina para verificar se restam promo√ß√µes
            driver.get(url)
            time.sleep(TEMPO_ESPERA)

        except Exception as e:
            print(f"‚ùå Erro ao processar {mlb}: {str(e)[:200]}")
            break

        if not promocoes_restantes:
            break

    return promocoes_removidas


# ===== EXECU√á√ÉO PRINCIPAL =====
def main():
    verificar_ambiente()
    matar_processos_edge()

    if not iniciar_edge_com_debug():
        sys.exit(1)

    print("üîó Conectando Selenium...")
    driver = conectar_selenium()
    if not driver:
        sys.exit(1)

    print(f"‚úÖ Edge conectado com sucesso via porta {DEBUG_PORT}")

    try:
        df = pd.read_excel(ARQUIVO_PLANILHA)
        mlbs = df[COLUNA_MLB].dropna().astype(str).str.strip().tolist()
        print(f"\nüìä Total de an√∫ncios a processar: {len(mlbs)}")
    except Exception as e:
        print(f"‚ùå Erro ao carregar planilha: {e}")
        driver.quit()
        sys.exit(1)

    falhas = []
    total_promocoes_removidas = 0
    total_sem_promocao = 0

    for i, mlb in enumerate(mlbs, 1):
        mlb = mlb.strip()
        if not mlb.startswith('MLB'):
            print(f"‚ö†Ô∏è MLB inv√°lido: {mlb} - Pulando...")
            continue

        print(f"\nüîé Processando {i}/{len(mlbs)} - MLB: {mlb}")
        removidas = remover_promocoes(driver, mlb)

        if removidas == 0:
            falhas.append(mlb)
            total_sem_promocao += 1
            print(f"‚ö†Ô∏è Nenhuma promo√ß√£o removida ou an√∫ncio j√° estava sem promo√ß√µes - {mlb}")
        else:
            total_promocoes_removidas += removidas
            print(f"‚úÖ {removidas} promo√ß√£o(√µes) removida(s) do an√∫ncio {mlb}")

        time.sleep(TEMPO_ESPERA_EXTRA)

    # Salva os mlbs que falharam
    if falhas:
        with open(ARQUIVO_FALHAS, "w", encoding="utf-8") as f:
            f.write("\n".join(falhas))
        print(f"\n‚ö†Ô∏è Alguns an√∫ncios n√£o tiveram promo√ß√µes removidas. Lista salva em {ARQUIVO_FALHAS}")

    driver.quit()
    print("\n" + "=" * 50)
    print(f"‚úÖ PROCESSO CONCLU√çDO")
    print(f"üîπ Total de an√∫ncios processados: {len(mlbs)}")
    print(f"üîπ Total de promo√ß√µes removidas: {total_promocoes_removidas}")
    print(f"üîπ An√∫ncios j√° sem promo√ß√µes: {total_sem_promocao}")
    print(f"üîπ An√∫ncios com falha: {len(falhas)}")
    print("=" * 50)


if __name__ == "__main__":
    main()
