import os
import sys
import time
import psutil
import pandas as pd
import subprocess
import requests
import socket
from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (NoSuchElementException,
                                        WebDriverException,
                                        TimeoutException)
from urllib3.exceptions import ReadTimeoutError

# ===== CONFIGURA√á√ïES =====
ARQUIVO_PLANILHA = r"C:\Users\USER\PycharmProjects\Remove Promo\DATA\Correcao Preco Diplany.xlsx"
COLUNA_MLB = "CODIGO_ANUNCIO"
TEMPO_ESPERA = 5
TEMPO_ESPERA_EXTRA = 3
TENTATIVAS_MAX = 3
TIMEOUT_PAGINA = 60  # segundos
ARQUIVO_FALHAS = "mlbs_falhados.txt"

EDGE_PROFILE_PATH = r"C:\Users\USER\AppData\Local\Microsoft\Edge\User Data"
EDGE_PROFILE_NAME = "Profile 1"
EDGE_DRIVER_PATH = r"C:\WebDriver\msedgedriver.exe"
EDGE_BINARY_PATH = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
DEBUG_PORT = 9222


# ===== FUN√á√ïES =====
def verificar_porta_debug():
    """Verifica se a porta de depura√ß√£o est√° respondendo"""
    try:
        response = requests.get(f"http://localhost:{DEBUG_PORT}/json/version", timeout=5)
        return response.status_code == 200
    except:
        return False


def matar_processos_edge():
    """Encerra todos os processos do Edge de forma robusta"""
    print("üî¥ Encerrando processos do Edge...")
    processos_mortos = 0
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if proc.info['name'] and any(x in proc.info['name'].lower() for x in ['msedge', 'edge']):
                proc.kill()
                processos_mortos += 1
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    print(f"‚úîÔ∏è {processos_mortos} processos encerrados")
    time.sleep(5)


def iniciar_edge_com_debug():
    """Inicia o Edge manualmente com porta de depura√ß√£o"""
    print("üöÄ Iniciando Edge com depura√ß√£o remota...")
    cmd = [
        EDGE_BINARY_PATH,
        f"--user-data-dir={EDGE_PROFILE_PATH}",
        f"--profile-directory={EDGE_PROFILE_NAME}",
        f"--remote-debugging-port={DEBUG_PORT}",
        "--no-first-run",
        "about:blank"
    ]

    try:
        subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # Aguarda at√© 30 segundos pela porta de depura√ß√£o
        for _ in range(30):
            if verificar_porta_debug():
                return True
            time.sleep(1)

        print("‚ùå Timeout: Porta de depura√ß√£o n√£o respondeu")
        return False
    except Exception as e:
        print(f"‚ùå Falha ao iniciar Edge: {e}")
        return False


def conectar_selenium():
    """Conecta Selenium ao Edge usando a nova sintaxe"""
    options = Options()
    options.add_experimental_option("debuggerAddress", f"127.0.0.1:{DEBUG_PORT}")

    try:
        service = Service(executable_path=EDGE_DRIVER_PATH)
        driver = webdriver.Edge(service=service, options=options)
        driver.set_page_load_timeout(TIMEOUT_PAGINA)
        driver.get("about:blank")  # Teste de conex√£o
        return driver
    except Exception as e:
        print(f"‚ùå Falha ao conectar Selenium: {e}")
        return None


def verificar_ambiente():
    """Verifica se todos os requisitos est√£o atendidos"""
    erros = []

    if not os.path.exists(EDGE_DRIVER_PATH):
        erros.append(f"EdgeDriver n√£o encontrado em: {EDGE_DRIVER_PATH}")

    if not os.path.exists(EDGE_BINARY_PATH):
        erros.append(f"Execut√°vel do Edge n√£o encontrado em: {EDGE_BINARY_PATH}")

    if not os.path.exists(ARQUIVO_PLANILHA):
        erros.append(f"Planilha n√£o encontrada: {ARQUIVO_PLANILHA}")

    if erros:
        print("\n‚ùå Erros de configura√ß√£o:")
        for erro in erros:
            print(f"- {erro}")
        print("\nüîç Solu√ß√µes:")
        print("- Baixe o EdgeDriver em: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/")
        print("- Verifique os caminhos configurados")
        sys.exit(1)


def reconectar_driver(driver):
    """Reinicia completamente o navegador e driver"""
    print("üîÑ Reconectando o navegador...")
    try:
        if driver:
            driver.quit()
    except:
        pass

    matar_processos_edge()
    if not iniciar_edge_com_debug():
        raise Exception("Falha ao reiniciar o navegador")

    new_driver = conectar_selenium()
    if not new_driver:
        raise Exception("Falha ao reconectar o Selenium")

    return new_driver


def encontrar_botoes_promocao(driver):
    """Localiza todos os bot√µes relevantes para remo√ß√£o de promo√ß√µes"""
    try:
        return WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.XPATH,
                                                 "//button[contains(., 'Deixar de participar') or "
                                                 "contains(., 'Alterar') or "
                                                 "contains(., 'Remover promo√ß√£o')]")))
    except TimeoutException:
        return []


def processar_promocao(driver, botao, mlb):
    """Processa um bot√£o de promo√ß√£o individual"""
    try:
        texto = botao.text.strip()
        driver.execute_script("arguments[0].scrollIntoView();", botao)
        driver.execute_script("arguments[0].click();", botao)
        time.sleep(TEMPO_ESPERA)

        if "Deixar de participar" in texto:
            # Confirmar no popup
            try:
                confirmar = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH,
                                                "//button[contains(., 'Confirmar') or "
                                                "contains(., 'Deixar de participar') or "
                                                "contains(., 'Sim')]")))
                confirmar.click()
                time.sleep(TEMPO_ESPERA)
                return True
            except:
                return False

        elif "Alterar" in texto or "Remover promo√ß√£o" in texto:
            # Clicar no bot√£o "Deixar de participar" no popup
            try:
                deixar = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH,
                                                "//button[contains(., 'Deixar de participar')]")))
                deixar.click()
                time.sleep(TEMPO_ESPERA)

                # Confirmar no segundo popup
                try:
                    confirmar = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH,
                                                    "//button[contains(., 'Confirmar') or "
                                                    "contains(., 'Deixar de participar')]")))
                    confirmar.click()
                    time.sleep(TEMPO_ESPERA)
                    return True
                except:
                    return False
            except:
                return False
    except:
        return False


def remover_promocoes(driver, mlb):
    """Remove todas as promo√ß√µes de um an√∫ncio com tratamento robusto"""
    url = f"https://www.mercadolivre.com.br/anuncios/lista/promos/?search={mlb}"
    promocoes_removidas = 0

    for tentativa in range(1, TENTATIVAS_MAX + 1):
        try:
            try:
                driver.get(url)
                time.sleep(TEMPO_ESPERA)
            except (socket.timeout, ReadTimeoutError, WebDriverException) as e:
                print(f"‚ö†Ô∏è Timeout ao carregar p√°gina (Tentativa {tentativa}): {str(e)[:100]}")
                if tentativa == TENTATIVAS_MAX:
                    raise
                continue

            while True:
                botoes = encontrar_botoes_promocao(driver)
                if not botoes:
                    break

                for botao in botoes:
                    if processar_promocao(driver, botao, mlb):
                        promocoes_removidas += 1
                        print(f"‚úîÔ∏è Promo√ß√£o removida (Tentativa {tentativa}) - {mlb}")
                    else:
                        print(f"‚ö†Ô∏è Falha ao processar bot√£o (Tentativa {tentativa}) - {mlb}")

                # Verifica se ainda h√° promo√ß√µes
                driver.get(url)
                time.sleep(TEMPO_ESPERA)

            return promocoes_removidas

        except Exception as e:
            print(f"‚ùå Erro ao processar {mlb} (Tentativa {tentativa}): {str(e)[:200]}")
            if tentativa < TENTATIVAS_MAX:
                try:
                    driver = reconectar_driver(driver)
                except Exception as reconect_error:
                    print(f"‚ùå Falha ao reconectar: {reconect_error}")
                    break
            else:
                driver.save_screenshot(f"erro_mlb_{mlb}.png")

    return promocoes_removidas


# ===== EXECU√á√ÉO PRINCIPAL =====
def main():
    verificar_ambiente()
    matar_processos_edge()

    if not iniciar_edge_com_debug():
        sys.exit(1)

    print("üîó Conectando Selenium...")
    driver = conectar_selenium()
    if not driver:
        sys.exit(1)

    print(f"‚úÖ Edge conectado com sucesso via porta {DEBUG_PORT}")

    try:
        df = pd.read_excel(ARQUIVO_PLANILHA)
        mlbs = df[COLUNA_MLB].dropna().astype(str).str.strip().tolist()
        print(f"\nüìä Total de an√∫ncios a processar: {len(mlbs)}")
    except Exception as e:
        print(f"‚ùå Erro ao carregar planilha: {e}")
        driver.quit()
        sys.exit(1)

    falhas = []
    total_promocoes_removidas = 0
    total_sem_promocao = 0

    for i, mlb in enumerate(mlbs, 1):
        mlb = mlb.strip()
        if not mlb.startswith('MLB'):
            print(f"‚ö†Ô∏è MLB inv√°lido: {mlb} - Pulando...")
            continue

        print(f"\nüîé Processando {i}/{len(mlbs)} - MLB: {mlb}")

        try:
            removidas = remover_promocoes(driver, mlb)

            if removidas == 0:
                falhas.append(mlb)
                total_sem_promocao += 1
                print(f"‚ö†Ô∏è Nenhuma promo√ß√£o removida - {mlb}")
            else:
                total_promocoes_removidas += removidas
                print(f"‚úÖ {removidas} promo√ß√£o(√µes) removida(s) - {mlb}")

            time.sleep(TEMPO_ESPERA_EXTRA)

        except Exception as e:
            print(f"‚ùå Erro cr√≠tico ao processar {mlb}: {str(e)[:200]}")
            falhas.append(mlb)
            try:
                driver = reconectar_driver(driver)
            except Exception as reconect_error:
                print(f"‚ùå Falha ao reconectar: {reconect_error}")
                break

    # Salva os mlbs que falharam
    if falhas:
        with open(ARQUIVO_FALHAS, "w", encoding="utf-8") as f:
            f.write("\n".join(falhas))
        print(f"\n‚ö†Ô∏è Alguns an√∫ncios n√£o tiveram promo√ß√µes removidas. Lista salva em {ARQUIVO_FALHAS}")

    driver.quit()
    print("\n" + "=" * 50)
    print(f"‚úÖ PROCESSO CONCLU√çDO")
    print(f"üîπ Total de an√∫ncios processados: {len(mlbs)}")
    print(f"üîπ Total de promo√ß√µes removidas: {total_promocoes_removidas}")
    print(f"üîπ An√∫ncios j√° sem promo√ß√µes: {total_sem_promocao}")
    print(f"üîπ An√∫ncios com falha: {len(falhas)}")
    print("=" * 50)


if __name__ == "__main__":
    main()